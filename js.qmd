# Introduction to JavaScript

WIP...pre spelling check

This tutorial covers the basic functionality operations of the JavaScript (JS) language, covering the following topics:

* Setting VScode environment
* Basic workflow
* Variables
* Functions
* Data structure

## Prerequisites 

Here are the assumptions I made when I created this tutorial:

* No previous knowledge of JS
* Have basic knowledge of another programming language (e.g., Python, R, Julia, etc.), and an understanding of the use of variables assignment and functions

In addition, we will use some basic HTML and CSS throughout the tutorial, don’t worry if you are unfamiliar with those languages.

## Settings

Before getting started, let's set the development environment. There are many ways to develop and execute JavaScript. For this tutorial, I use VScode, which has great integrations with JavaScript, HTML, and CSS and seamless integration with Docker. In addition, it has great integration with Quarto, which was used to create this document. If you want to follow the same settings, check the instructions below.

### VScode Settings for JavaScript

If you don't have VScode installed, you can download and install it directly from the [VScode website](https://code.visualstudio.com/). I also use the following extensions:

* [Live Server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) extension, which enables you to launch a local development server with a live reload feature for static & dynamic pages
* [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) extension, supporting development on VScode with Docker containers

### Setting Docker Environment

One of the main reasons I love using VScode is the seamless integration with Docker. It enables you to develop in your local folder while executing the code inside the image. Here is what you need to set your VScode to run inside a Docker image:

* Docker Desktop (or equivalent) install on your machine (download and install it from [here](https://www.docker.com/products/docker-desktop/))
* Docker [extension](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) for VScode
* Set the supporting image, [here](https://github.com/RamiKrispin/Tutorials/tree/main/docker) are the Docker settings I am using for this tutorial
* Create the devcontainer.json file with your container settings (image name, environment variables, extension names, etc.), [here](https://github.com/RamiKrispin/Tutorials/blob/main/.devcontainer/devcontainer.json) is my `devcontainer.json` file setting
* Open the folder inside the container (see the screenshot below)

<img src="./images/vscode_container.gif" alt="Open Container" width="100%"> 

You can read more about setting and using Docker with VScode on [VScode's documentation](https://code.visualstudio.com/docs/containers/overview).


If you want to leverage the tutorial Docker settings, you can clone the repository and follow the next steps:

* Open the tutorial repository's folder on VScode
* Open the `Command Palette` (⇧⌘P in Mac, Ctrl+Shift+P in Windows) or use the `Open Remote Window` button (on the bottom left side, see the screen recording above) and type `Open Folder in Container`.

**Note:** It might take few minutes on the first time opening the container, as it pull the docker image from [Docker Hub](https://hub.docker.com/repository/docker/rkrispin/tutorial).

## Workflow

JavaScript (also known as JS), is one of the most popular programming languages for web development. It is typically used to create web page applications, mobile apps, games, and great data visualization tools (D3, Observable Plot, Leaflet, Charts, etc.). You can run JavaScript on your web browser (e.g., Chrome, Safari, Firefox, etc.):

**Screen record here***

While you can use your web browser as a consul for ad-hoc code tests, the development of JS applications is done inside a script using a code editor such VScode, notepad, etc. It is common to have JS code embedded inside HTML script (or call JS script from HTML script). 

### File structure

In this tutorial, we will adopt the basic framework for running JS code on the browser by setting a web page with an HTML file (`index.html`) and leveraging it to call a JS file (`index.js`) with our JS code. In addition, we will use a CSS file (`style.css`) to set the web page style. I will set those files under the [JavaScript folder](https://github.com/RamiKrispin/Tutorials/tree/main/JavaScript):

``` shell
.
├── index.html
├── index.js
└── style.ccs
```


**Note:** For convenience, I placed the three files in the same folder. However, if you wish to arrange it differently, you can easily reference the `index.js` and `style.css` file paths from the `index.html` file.

Don't worry if you are not familiar with HTML or CSS. We will use the basic templates to set those files. Let's start by creating three empty files using the file names above. To set the HTML file, we will use the VScode HTML code snippet template by typing the `!` symbol and press enter:

<img src="./images/vscode_html_template.gif" alt="Setting HTML template" width="100%"> 

In a nutshell, the HTML file we created contains the following two main elements:

* `head` - Use to define the page metadata and settings
* `body` - Use to set the page content

An excellent resource to read about the [head](https://www.w3schools.com/tags/tag_head.asp) and [body](https://www.w3schools.com/tags/tag_body.asp) tags, or any other tags, is the [w3schools website](https://www.w3schools.com/html/default.asp).

**index.html**:
``` html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
</body>
</html>
```

Here are a few things we are going to modify and add to this file:

* The `<title>` tag under the `<head>` defines the web browser's tab title. Let's modify it from *Document* to *Introduction to JS*
* Set the page CSS by linking the `style.css` file to the page `<head>` element using the [link](https://www.w3schools.com/tags/tag_link.asp) tag

**index.html**:
``` html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Introduction to JS</title>
    <link rel="stylesheet" href = "style.css">
</head>
<body>
</body>
</html>
```

Here is the basic CSS settings we will use on the `style.css` file:

``` CSS

```

### Live Server

Before we diving into JS code, let's see how the VScode's [live server](https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer) extension is working and how to leverage it in our workflow. This extension will enable us to instantaneously review the changes we apply to the index.html file on the web browser as we update and save the code. If you have wide screen, I recommand to open side-by-side VScode and your default browser and see, while coding, the changes in the browser. To launch the live server on VScode, go to the EXPLORER tab left side and right-click on the index.html file. That should pop up a window with options, select *Open with Live Server* option:

<img src="./images/vscode_live_server.gif" alt="Live Server" width="100%"> 

That's it! we are ready to write our first JS code!